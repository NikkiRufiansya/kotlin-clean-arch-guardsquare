default_platform(:android)

platform :android do
#     Upload All
    lane :releaseapp do
        clean()
            begin
                buildapk()
            rescue => exception
                slackdexguarderror(exception)
            end
        copyapk()
        uploadtofirebaseappdistribution()
        appknoxaccesstoken()
        uploadtofirebasetestlab()
    end

#     Upload Without Appknox
    lane :releaseappwithoutuploadappknox do
        clean()
        begin
            buildapk()
        rescue => exception
            slackdexguarderror(exception)
        end
        uploadtofirebaseappdistribution()
        uploadtofirebasetestlab()
    end

#     Upload Without Firebase
    lane :releaseappwithoutuploadfirebase do
        clean()
         begin
            buildapk()
         rescue => exception
             slackdexguarderror(exception)
         end
          copyapk()
          appknoxaccesstoken()
    end

#     Jenkins
    lane :jenkins do
        clean()
         begin
            buildapk()
         rescue => exception
            slackdexguarderror(exception)
         end
         copyapk()
    end

#     Clean Project
    lane :clean do
        gradle(
          task: "clean",
          project_dir: "/Users/rmltech/AndroidStudioProjects/rml-demo-apps"
        )
    end

#     Build Application Release
    lane :buildapk do
        gradle(
          task: 'assemble',
          build_type: 'Release',
        )
        slackdexguardsuccess
    end

#     Slack Notification For DexGuard Failed Build
    def slackdexguarderror (exception)
        slack(
            message: "Lane failed with exception : #{exception}",
            success: false,
            slack_url: "https://hooks.slack.com/services/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",
            payload: {
                    "Built by" => "Jenkins",
            },
            default_payloads: [:test_result]
       )
    end

#     Slack Notification For DexGuard Success Build
    def slackdexguardsuccess
        slack(
            message: "The application was successfully built and protected by DexGuard",
            success: true,
            slack_url: "https://hooks.slack.com/services/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",
            payload: {
                "Built by" => "Jenkins",
            },
            default_payloads: [:test_result]
       )
    end

#     Copy Protected App for Upload to Appknox
    lane :copyapk do
        APK_LOCATION = "#{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]}"
        sh("cp #{APK_LOCATION} /Users/rmltech/Documents/Appknox/Fastlane-App")
    end

#     Firebase App Distribution Get Latest Version Code
    lane :increment_version do
        latest_release = firebase_app_distribution_get_latest_release(
          app: "1:954269003292:android:b4099e7352481e8e6239d9",
          firebase_cli_token: "1//0gt-XjFucD2qDCgYIARAAGBASNwF-L9IrXg1q10HqDfGeWS5J2f7NzFyYWHwvmBuy46cS1xFiClbPJ_pDzCYoKjxiXEZs6kytMDI"
        )
        increment_version_code({ version_code: latest_release[:buildVersion].to_i + 1 })
    end

#     Upload Application Protected to Firebase Distribution App
    lane :uploadtofirebaseappdistribution do
        increment_version()
        release = firebase_app_distribution(
              app: "1:954269003292:android:b4099e7352481e8e6239d9",
              firebase_cli_token: "1//0gt-XjFucD2qDCgYIARAAGBASNwF-L9IrXg1q10HqDfGeWS5J2f7NzFyYWHwvmBuy46cS1xFiClbPJ_pDzCYoKjxiXEZs6kytMDI",
              testers: "nikkirufiansya2@gmail.com, technicalrml2023@gmail.com",
               release_notes: "DexGuard Version 4.9.21"
        )
        slackfirebasedistributionappsuccess()
    end

#     Slack Notification For Firebase App Distribution Success Upload
    def slackfirebasedistributionappsuccess
        slack(
            message: "App successfully uploaded to Firebase App Distribution",
            success: true,
            slack_url: "https://hooks.slack.com/services/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",
            default_payloads: [:test_result]
        )
    end

#     Export Access Token Appknox
    lane :appknoxaccesstoken do
        sh("export APPKNOX_ACCESS_TOKEN=156e23bde8e3506cc5fd1bc8ae49b9d2a2d689ab")
        appknoxwhoami()
        uploadtoappknox()
    end

#     Get Credential Appknox
    lane :appknoxwhoami do
        sh("/usr/local/bin/appknox whoami --access-token 156e23bde8e3506cc5fd1bc8ae49b9d2a2d689ab")
    end

#     Upload Protected App to Appknox
    lane :uploadtoappknox do
        begin
            sh("/usr/local/bin/appknox upload /Users/rmltech/Documents/Appknox/Fastlane-App/app-release-protected.apk | xargs /usr/local/bin/appknox cicheck --risk-threshold critical")
            slackappknoxsuccess()
        rescue => exception
            slackappknoxfailed(exception)
        end
    end

#     Slack Notification For Appknox Success Upload
    def slackappknoxsuccess
        slack(
            message: "The application successfully uploaded to Appknox",
            success: true,
            slack_url: "https://hooks.slack.com/services/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",
            default_payloads: [:test_result]
        )
    end

#     Slack Notification For Appknox Failed Upload
    def slackappknoxfailed(exception)
        slack(
            message: "The application uploaded successfully but there are findings: : #{exception}",
            success: false,
            slack_url: "https://hooks.slack.com/services/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",
            default_payloads: [:test_result]
        )
    end

#     Upload Application to Firebase Test Lab
    lane :uploadtofirebasetestlab do
        begin
            sh("/opt/homebrew/bin/gcloud firebase test android run --type robo --app /Users/rmltech/Documents/Appknox/Fastlane-App/app-release-protected.apk")
            slacktfirebasetestlabsuccess
        rescue => exception
            slackfirebasetestlabfailed(exception)
        end

    end

#     Run DexGuard Standalone
    lane :dexguardstandalone do
        sh("java -Ddexguard.license=/Users/rmltech/Documents/GuardSquare/DexGuard/Lisensi/baru/dexguard-license.txt -DANDROID_HOME=/Users/rmltech/Library/Android/sdk/platforms/android-34/android.jar -jar /Users/rmltech/Documents/GuardSquare/DexGuard/Versi/DexGuard-9.4.21/lib/dexguard.jar @/Users/rmltech/Documents/GuardSquare/DexGuard/dexguard-standalone.txt")
    end

#     Run DexGuard Standalone and Upload to Appknox
    lane :dexguardstandaloneuploadtoappknpx do
        begin
            dexguardstandalone()
            slackdexguardsuccess
        rescue => exception
            slackdexguarderror(exception)
        end

         begin
            sh("export APPKNOX_ACCESS_TOKEN=156e23bde8e3506cc5fd1bc8ae49b9d2a2d689ab")
            sh("/usr/local/bin/appknox upload /Users/rmltech/Documents/GuardSquare/Demo/Fastlane-DG-Standalone/app-release-protected.apk | xargs /usr/local/bin/appknox cicheck --risk-threshold critical")
            slackappknoxsuccess()
         rescue => exception
            slackappknoxfailed(exception)
         end
    end

     def slackfirebasetestlabfailed(exception)
        slack(
            message: "Application failed to upload to Firebase Test Lab",
            success: false,
            slack_url: "https://hooks.slack.com/services/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",
            default_payloads: [:test_result]
        )
     end

     def slacktfirebasetestlabsuccess
        slack(
            message: "The application successfully uploaded to Firebase Test Lab",
            success: true,
            slack_url: "https://hooks.slack.com/services/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",
            default_payloads: [:test_result]
        )
     end
 end